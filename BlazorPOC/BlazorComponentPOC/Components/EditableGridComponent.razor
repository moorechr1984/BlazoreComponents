@typeparam TRow
@typeparam TChildRow
@using BlazorComponentPOC.Data
@using BlazorComponentPOC.Components
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

<style>
/*    table {
        width: 100%;
    }

    .table-container {
        overflow-x: auto;
    }
*/
    .oi-plus {
        fill: green
    }
</style>


<div class="input-group mb-3">
    <div class="input-group-prepend">
        <label class="input-group-text" for="select_theme">Table Theme:</label>
    </div>
    <select @bind="_selectedTheme" id="select_theme">
        <option id="default" selected>Select a Theme...</option>
        <option id="dark">Dark</option>
        <option id="light">Light</option>
    </select>
</div>
<div class="table-responsive">
    <table class="table table-bordered table-hover @_gridTheme">

        @if (_isLoading)
        {
            <tbody>
                <tr>
                    <td>
                        Loading...
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </td>
                </tr>
            </tbody>
        }
        else
        {
            if (!_hideGrid)
            {
                <thead class="thead-light">
                    <tr>
                        @{
                            if (ChildRowDatasourceCallback != null)
                            {
                                <th scope="col"></th>
                            }
                            if (_columnNames != null)
                            {
                                int counter = 0;
                                foreach (var columName in _columnNames?.OrderBy(x => x.Key))
                                {
                                    var id = columName.Value.ColumnDataPropertyName + "_" + counter;

                                    string css = null;
                                    if(_columnSortInfo != null && _columnSortInfo.Any())
                                    {
                                        var columnSortInfo = _columnSortInfo.Find(x => x.ColumnName == columName.Value?.ColumnDataPropertyName);

                                        if(columnSortInfo != null)
                                        {
                                            css = columnSortInfo.SortDirection == "ASC" ? "oi oi-chevron-top" : "oi oi-chevron-bottom";
                                        }
                                    }
                                    else
                                    {
                                        css = "oi oi-chevron-top";
                                    }
                                    <th scope="col" class ="text-sm-left"style="cursor: pointer" @onclick="() => OnClick_Header(columName.Value.ColumnDataPropertyName)" id="@id">
                                        <i class="bi bi-sort-up"></i>
                                        @columName.Value.ColumnDisplayName
                                    </th>
                                    counter++;
                                }
                            }
                            if (ShowHideTableIcon)
                            {
                                <th>
                                    <span class="oi oi-circle-x" style="color:blue" @onclick="() => OnHideGridClick()"></span>
                                </th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (_transformedRows?.Any() == true)
                    {
                        var counter = 0;
                        @foreach (var row in _transformedRows?.OrderBy(x => x.Key))
                        {
                            //List<TChildRow> childRows =  null;
                            <tr>
                                @{
                                    bool result = false;
                                    _childGridRows.TryGetValue(row.Key, out result);
                                    var css = result ? "oi oi-minus" : "oi oi-plus";
                                    var color = result ? "red" : "green";

                                    if (ChildRowDatasourceCallback != null)
                                    {

                                        <th scope="row"><span class="@css" style="color: @color" @onclick="() => OnClick_PlusIcon(row.Key, true)"></span></th>
                                    }
                                    foreach (var column in row.Value.OrderBy(x => x.Key))
                                    {
                                        if (ReadonlyGrid)
                                        {

                                            <td> @column.Value</td>

                                        }
                                        else
                                        {

                                            <td>
                                                <input type="text" value="@column.Value" class="form-control" disabled="@_readonlyControl" />
                                            </td>

                                        }
                                    }
                                    counter++;

                                    if (ShowHideTableIcon)
                                    {
                                        <td></td>
                                    }


                                }
                            </tr>
                            if (result)
                            {
                                var childRows = ChildRowDatasourceCallback(Datasource.ElementAt(row.Key - 1));

                                if (childRows?.Any() == true)
                                {
                                    <tr>
                                        <td>
                                        </td>
                                        <td colspan="@row.Value.Count">
                                            <EditableGridComponent Datasource="childRows" TChildRow="TChildRow" TRow="TChildRow" ShowChildGrid="false" ReadonlyGrid="ReadonlyChildGrid"></EditableGridComponent>
                                        </td>
                                    </tr>
                                }
                            }

                        }
                    }
                    <tr>
                        @{
                            if (!ReadonlyGrid)
                            {

                                int colspan = 0;
                                if (_columnNames.Count % 2 == 0)
                                {
                                    colspan = _columnNames.Count / 2;
                                }
                                else
                                {
                                    colspan = _columnNames.Count - 1 % 2;
                                }
                                <td colspan="@colspan">
                                    @{

                                        if (_btnEditGridComponentEditDisabled == null)
                                        {
                                            <button type="button" class="btn btn-primary @_btnEditGridComponentEditDisabled" id="btnEditGridComponent_Edit_@Guid.NewGuid()" disabled="@_btnEditGridComponentEditDisabled" @onclick="OnClick_btnEditGridComponent_Edit">Edit</button>
                                        }
                                        if (_btnEditGridComponentSaveDisabled == null)
                                        {
                                            <button class="btn btn-primary @_btnEditGridComponentSaveDisabled" id="btnEditGridComponent_Cancel_@Guid.NewGuid()" disabled="@_btnEditGridComponentCancelDisabled" data-toggle="modal" data-target="#editGridComponent_CancelConfirmModal">Cancel</button>
                                        }
                                    }
                                </td>
                                <td colspan="@colspan">
                                    <button type="button" class="btn btn-success btnEditGridComponent_Save_Disabled" id="btnEditGridComponent_Save_@Guid.NewGuid()" disabled="@_btnEditGridComponentSaveDisabled" data-toggle="modal" data-target="#editGridComponent_SaveConfirmModal">Save</button>
                                </td>
                            }

                        }

                    </tr>
                </tbody>
            }
        }

    </table>
</div>


<div class="modal" tabindex="-1" role="dialog" id="editGridComponent_SaveConfirmModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Save Changes?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to save your changes?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" data-dismiss="modal" @onclick="OnClick_btnEditGridComponent_Save">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="editGridComponent_CancelConfirmModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cancel Changes?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to clear your changes?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-toggle="modal" id="editGridComponent_CancelConfirmModal_btnCancel" @onclick="OnClick_btnEditGridComponent_Cancel" data-dismiss="modal">Clear changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>