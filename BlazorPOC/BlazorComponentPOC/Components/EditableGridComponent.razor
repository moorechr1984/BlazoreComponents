@typeparam TRow
@typeparam TChildRow
<style>
    table {
        width: 100%;
    }

    .table-container {
        overflow-x: auto;
    }

    .oi-plus {
        fill: green
    }
</style>

@*<table  table-container*@

<div class="table-responsive">
    <table class="table table-bordered table-hover table-responsive">

        @if (isLoading)
        {
            <tbody>
                <tr>
                    <td>
                        Loading...
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </td>
                </tr>
            </tbody>
        }
        else
        {
            <thead>
                <tr>
                    @{
                        <th scope="col"></th>
                        if (ColumnNames != null)
                        {
                            int counter = 0;
                            foreach (var columName in ColumnNames?.OrderBy(x => x.Key))
                            {
                                var id = columName.Value + "_" + counter;
                                <th scope="col" style="cursor: pointer" @onclick="() => OnClick_Header(columName.Value)" id="@id">
                                    @*<span class="oi oi-sort-ascending" title="oi-sort-ascending" aria-hidden="true"></span>*@
                                    @columName.Value
                                </th>
                                counter++;
                            }
                        }
                    }
                </tr>
            </thead>
            <tbody>
                @if (TransformedRows?.Any() == true)
                {
                    var counter = 0;
                    @foreach (var row in TransformedRows?.OrderBy(x => x.Key))
                    {
                        //List<TChildRow> childRows =  null;
                        <tr>
                            @{
                                <th scope="row"><span class="@ChildGridExpandIcon" style="color: @ChildGridExpandIconStyle" @onclick="() => OnClick_PlusIcon(row.Key, true)"></span></th>
                                foreach (var column in row.Value.OrderBy(x => x.Key))
                                {

                                    <td>
                                        <input type="text" value="@column.Value" class="form-control" disabled="@readonlyControl" />
                                    </td>
                                }
                                counter++;

                            }
                        </tr>


                                bool result = false;
                                ChildGridRows.TryGetValue(counter, out result);
                                if (result)
                                {
                                    var childRows = ChildRowDatasourceCallback(Datasource.ElementAt(row.Key));

                                    if (childRows?.Any() == true)
                                    {
                                <tr>
                                    <td>
                                    </td>
                                    <td colspan="@row.Value.Count">
                                        <EditableGridComponent Datasource="childRows" TChildRow="TChildRow" TRow="TChildRow" ShowChildGrid="false" ></EditableGridComponent>
                                    </td>
                                </tr>
                                        }
                                    }

                                }
                                }
            <tr>
                @{
                    if (!ReadonlyGrid)
                    {

                        int colspan = 0;
                        if (ColumnNames.Count % 2 == 0)
                        {
                            colspan = ColumnNames.Count / 2;
                        }
                        else
                        {
                            colspan = ColumnNames.Count - 1 % 2;
                        }
                        <td colspan="@colspan">
                            if (btnEditGridComponent_Edit_Disabled == null)
                            {
                            <button type="button" class="btn btn-primary @btnEditGridComponent_Edit_Disabled" id="btnEditGridComponent_Edit_@Guid.NewGuid()" disabled="@btnEditGridComponent_Edit_Disabled" @onclick="OnClick_btnEditGridComponent_Edit">Edit</button>
                            }
                            if (btnEditGridComponent_Save_Disabled == null)
                            {
                            <button class="btn btn-primary @btnEditGridComponent_Cancel_Disabled" id="btnEditGridComponent_Cancel_@Guid.NewGuid()" disabled="@btnEditGridComponent_Cancel_Disabled" data-toggle="modal" data-target="#editGridComponent_CancelConfirmModal">Cancel</button>
                            }
                        </td>
                        <td colspan="@colspan">
                            <button type="button" class="btn btn-success btnEditGridComponent_Save_Disabled" id="btnEditGridComponent_Save_@Guid.NewGuid()" disabled="@btnEditGridComponent_Save_Disabled" data-toggle="modal" data-target="#editGridComponent_SaveConfirmModal">Save</button>
                        </td>
                    }

                }

            </tr>
                </tbody>
                            }

    </table>
</div>


<div class="modal" tabindex="-1" role="dialog" id="editGridComponent_SaveConfirmModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Save Changes?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to save your changes?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" data-dismiss="modal" @onclick="OnClick_btnEditGridComponent_Save">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="editGridComponent_CancelConfirmModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cancel Changes?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to clear your changes?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-toggle="modal" id="editGridComponent_CancelConfirmModal_btnCancel" @onclick="OnClick_btnEditGridComponent_Cancel" data-dismiss="modal">Clear changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code
{

    [Parameter]
    public List<TRow> Datasource { get; set; }

    [Parameter]
    public Func<TRow, List<TChildRow>> ChildRowDatasourceCallback { get; set; }

    //[Parameter]
    //public bool RenderChildGrid { get; set; }
    [Parameter]

    public bool ShowChildGrid { get; set; }

    [Parameter]
    public bool ReadonlyGrid { get; set; } = true;

    public Dictionary<int, string>
    ColumnNames
    { get; set; }

    public Dictionary<int, object>
        ColumnValues
    { get; set; }

    public Dictionary<int, Dictionary<int, object>> TransformedRows { get; set; }

    public List<TRow> RowsToBeUsed { get; set; }

    public string btnEditGridComponent_Edit_Disabled { get; set; }

    public string btnEditGridComponent_Save_Disabled { get; set; }

    public string btnEditGridComponent_Cancel_Disabled { get; set; } = "disabled";

    public bool readonlyControl { get; set; }
    public bool isLoading { get; set; } = true;

    private List<ColumnSort> ColumnSortInfo { get; set; }

    public Dictionary<int, bool> ChildGridRows = new Dictionary<int, bool>();

    public string ChildGridExpandIcon { get; set; } = "oi oi-plus";

    public string ChildGridExpandIconStyle {get; set;} = "green";





    public async Task<Dictionary<int, string>> GetColumnsFromRows()
    {
        return await Task.Factory.StartNew<Dictionary<int, string>>(() =>
        {
            foreach (var row in Datasource)
            {
                var rowProperties = row.GetType().GetProperties();

                foreach (var rowProperty in rowProperties)
                {
                    var columns = rowProperty.GetCustomAttributes(typeof(BlazorComponentPOC.Components.ColumnAttribute), false).OfType<BlazorComponentPOC.Components.ColumnAttribute>();

                    if (ColumnNames == null)
                    {
                        ColumnNames = new Dictionary<int, string>();
                    }

                    if (!ColumnNames.ContainsKey(columns.First().GetPosition()))
                    {
                        ColumnNames.Add(columns.First().GetPosition(), columns.First().GetColumnName());
                    }

                    var childRows = rowProperty.GetCustomAttributes(typeof(BlazorComponentPOC.Components.ChildRowsAttribute), false).OfType<BlazorComponentPOC.Components.ChildRowsAttribute>();

                    if (childRows?.Any() == true)
                    {
                        // var result = ChildRowDatasourceCallBack(row);
                    }

                }

            }
            return ColumnNames;
        });
    }


    public async Task<Dictionary<int, Dictionary<int, object>>> GetRows()
    {
        return await Task.Factory.StartNew<Dictionary<int, Dictionary<int, object>>>(() =>
        {
            int rowCounter = 1;
            foreach (var row in Datasource)
            {
                var rowProperties = row.GetType().GetProperties();

                foreach (var rowProperty in rowProperties)
                {
                    if (ColumnValues == null)
                    {
                        ColumnValues = new Dictionary<int, object>();
                    }


                    if (rowProperty.GetCustomAttributes(typeof(BlazorComponentPOC.Components.ColumnAttribute), false).OfType<BlazorComponentPOC.Components.ColumnAttribute>().Any())
                    {
                        var column = rowProperty.GetCustomAttributes(typeof(BlazorComponentPOC.Components.ColumnAttribute), false).OfType<BlazorComponentPOC.Components.ColumnAttribute>().First();
                        if (!ColumnValues.ContainsKey(column.GetPosition()))
                        {
                            ColumnValues.Add(column.GetPosition(), rowProperty.GetValue(row));
                        }
                    }
                }
                if (TransformedRows == null)
                {
                    TransformedRows = new Dictionary<int, Dictionary<int, object>>();
                };
                var copiedColumnValue = ColumnValues;
                if (!TransformedRows.ContainsKey(rowCounter))
                {
                    TransformedRows.Add(rowCounter, copiedColumnValue);

                    rowCounter++;
                    ColumnValues = null;
                }
            }

            return TransformedRows;
        });
    }

    protected override async Task OnInitializedAsync()
    {
        InitializeComponent();
    }

    private void OnClick_btnEditGridComponent_Edit(MouseEventArgs args)
    {
        btnEditGridComponent_Edit_Disabled = "disabled";
        btnEditGridComponent_Save_Disabled = null;
        btnEditGridComponent_Cancel_Disabled = null;
        readonlyControl = false;
        StateHasChanged();
    }

    private void OnClick_btnEditGridComponent_Save()
    {
        btnEditGridComponent_Edit_Disabled = null;
        btnEditGridComponent_Save_Disabled = "disabled";
        btnEditGridComponent_Cancel_Disabled = "disabled";
        readonlyControl = readonlyControl;
        StateHasChanged();
    }

    public void OnClick_btnEditGridComponent_Cancel(MouseEventArgs args)
    {
        btnEditGridComponent_Edit_Disabled = null;
        btnEditGridComponent_Save_Disabled = "disabled";
        btnEditGridComponent_Cancel_Disabled = "disabled";
        readonlyControl = true;
        InitializeComponent();
    }

    public void OnClick_PlusIcon(int rowNumber, bool showChildGrid)
    {
        SetChildGridStyle(showChildGrid, rowNumber);

        StateHasChanged();
        // InitializeComponent();
    }

    private async Task InitializeComponent()
    {
        SetChildGridStyle(false, 0);
        readonlyControl = true;
        btnEditGridComponent_Edit_Disabled = null;
        isLoading = true;
        StateHasChanged();
        await GetColumnsFromRows();
        try
        {

            await GetRows();
        }
        catch (Exception e)
        {
            throw e;
        }
        isLoading = false;
        StateHasChanged();
    }


    private void OnClick_Header(string columnName)
    {
        if (ColumnSortInfo == null)
        {
            ColumnSortInfo = new List<ColumnSort>();
        }
        int sortOrder = ColumnSortInfo.Count();
        string sortDirection = null;

        if (ColumnSortInfo.Any(x => x.ColumnName == columnName))
        {
            sortDirection = "DESC";
        }
        else
        {

            sortDirection = "DESC";

        }

        ColumnSortInfo.Add(new ColumnSort
        {
            ColumnName = columnName,
            SortDirection = sortDirection,
            SortOrder = sortOrder + 1

        });

        Dictionary<int, object> copiedDictionary = new Dictionary<int, object>();

        for (int i = 0; i <= ColumnSortInfo.Count - 1; i++)
        {
            if (i == 0)
            {
                var sortInfo = ColumnSortInfo[i];

                var matchedColumn = ColumnNames.Where(x => x.Value == sortInfo.ColumnName).First();

                List<object> sortedColumnValues = new List<object>();

                foreach (var transformedRow in TransformedRows)
                {
                    foreach (var transformedColumn in transformedRow.Value)
                    {
                        if (transformedColumn.Key == matchedColumn.Key)
                        {
                            copiedDictionary.Add(transformedColumn.Key, transformedColumn.Value);
                        }
                    }
                }

                var result = copiedDictionary.OrderBy(x => x.Value) as Dictionary<int, object>;

                foreach (var transformedRow in TransformedRows)
                {
                    foreach (var transformedColumn in transformedRow.Value)
                    {
                        if (transformedRow.Key == matchedColumn.Key)
                        {
                            object matchedValue;
                            var newResult = result.TryGetValue(matchedColumn.Key, out matchedValue);
                            transformedRow.Value.Remove(matchedColumn.Key);
                            transformedRow.Value.Add(matchedColumn.Key, newResult);
                        }
                    }
                }


            }
        }
    }

    private void SetChildGridStyle(bool showChildGrid, int rowNumber)
    {
        if (ShowChildGrid)
        {
            if (!ChildGridRows.ContainsKey(rowNumber))
            {
                ChildGridRows.Add(rowNumber, showChildGrid);
            }
            else
            {
                ChildGridRows[rowNumber] = !ChildGridRows[rowNumber];
            }


            ChildGridExpandIcon = ChildGridRows[rowNumber] ? "oi oi-minus" : "oi oi-plus";
            ChildGridExpandIconStyle = ChildGridRows[rowNumber] ? "red" : "green";
        }
        else
        {
            ChildGridExpandIcon = string.Empty;
        }
    }


    private class ColumnSort
    {
        public string ColumnName { get; set; }
        public string SortDirection { get; set; }
        public int SortOrder { get; set; }
    }
}

